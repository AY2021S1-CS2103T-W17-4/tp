package seedu.address.logic.commands;

import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;
import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;
import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import seedu.address.model.Journal;
import seedu.address.model.Model;
import seedu.address.model.ModelManager;
import seedu.address.model.UserPrefs;
import seedu.address.model.person.Person;
import seedu.address.testutil.PersonBuilder;

/**
<<<<<<< HEAD:src/test/java/seedu/address/logic/commands/AddContactCommandIntegrationTest.java
 * Contains integration tests (interaction with the Model) for {@code AddContactCommand}.
=======
 * Contains integration tests (interaction with the Model) for
 * {@code AddCommand}.
>>>>>>> 69cb027... Refactor AddCommandIntegrationTest:src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java
 */
public class AddContactCommandIntegrationTest {

    private Model model;

    @BeforeEach
    public void setUp() {
        model = new ModelManager(
                getTypicalAddressBook(), new Journal(), new UserPrefs());
    }

    @Nested
    @DisplayName("execute")
    class Execute {
        @Test
        @DisplayName("should successfully add new person")
        public void execute_newPerson_success() {
            Person validPerson = new PersonBuilder().build();

            Model expectedModel = new ModelManager(
                    model.getAddressBook(), new Journal(), new UserPrefs());
            expectedModel.addPerson(validPerson);

<<<<<<< HEAD:src/test/java/seedu/address/logic/commands/AddContactCommandIntegrationTest.java
        assertCommandSuccess(new AddContactCommand(validPerson), model,
                String.format(AddContactCommand.MESSAGE_SUCCESS, validPerson), expectedModel);
    }

    @Test
    public void execute_duplicatePerson_throwsCommandException() {
        Person personInList = model.getAddressBook().getPersonList().get(0);
        assertCommandFailure(new AddContactCommand(personInList), model, AddContactCommand.MESSAGE_DUPLICATE_PERSON);
=======
            assertCommandSuccess(
                    new AddCommand(validPerson), model,
                    String.format(AddCommand.MESSAGE_SUCCESS, validPerson),
                    expectedModel
            );
        }

        @Test
        @DisplayName("should throw CommandException if a duplicate person is "
                + "added")
        public void execute_duplicatePerson_throwsCommandException() {
            Person personInList = model.getAddressBook().getPersonList().get(0);
            assertCommandFailure(
                    new AddCommand(personInList),
                    model,
                    AddCommand.MESSAGE_DUPLICATE_PERSON
            );
        }
>>>>>>> 69cb027... Refactor AddCommandIntegrationTest:src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java
    }
}
